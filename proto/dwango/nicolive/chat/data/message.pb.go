// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: dwango/nicolive/chat/data/message.proto

package data

import (
	atoms "github.com/shinosaki/nicolive-comment-protobuf/proto/dwango/nicolive/chat/data/atoms"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NicoliveMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*NicoliveMessage_Chat
	//	*NicoliveMessage_SimpleNotification
	//	*NicoliveMessage_Gift
	//	*NicoliveMessage_Nicoad
	//	*NicoliveMessage_GameUpdate
	//	*NicoliveMessage_TagUpdated
	//	*NicoliveMessage_ModeratorUpdated
	//	*NicoliveMessage_SsngUpdated
	//	*NicoliveMessage_OverflowedChat
	Data          isNicoliveMessage_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NicoliveMessage) Reset() {
	*x = NicoliveMessage{}
	mi := &file_dwango_nicolive_chat_data_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NicoliveMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicoliveMessage) ProtoMessage() {}

func (x *NicoliveMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dwango_nicolive_chat_data_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicoliveMessage.ProtoReflect.Descriptor instead.
func (*NicoliveMessage) Descriptor() ([]byte, []int) {
	return file_dwango_nicolive_chat_data_message_proto_rawDescGZIP(), []int{0}
}

func (x *NicoliveMessage) GetData() isNicoliveMessage_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NicoliveMessage) GetChat() *Chat {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_Chat); ok {
			return x.Chat
		}
	}
	return nil
}

func (x *NicoliveMessage) GetSimpleNotification() *SimpleNotification {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_SimpleNotification); ok {
			return x.SimpleNotification
		}
	}
	return nil
}

func (x *NicoliveMessage) GetGift() *Gift {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_Gift); ok {
			return x.Gift
		}
	}
	return nil
}

func (x *NicoliveMessage) GetNicoad() *Nicoad {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_Nicoad); ok {
			return x.Nicoad
		}
	}
	return nil
}

func (x *NicoliveMessage) GetGameUpdate() *GameUpdate {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_GameUpdate); ok {
			return x.GameUpdate
		}
	}
	return nil
}

func (x *NicoliveMessage) GetTagUpdated() *TagUpdated {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_TagUpdated); ok {
			return x.TagUpdated
		}
	}
	return nil
}

func (x *NicoliveMessage) GetModeratorUpdated() *atoms.ModeratorUpdated {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_ModeratorUpdated); ok {
			return x.ModeratorUpdated
		}
	}
	return nil
}

func (x *NicoliveMessage) GetSsngUpdated() *atoms.SSNGUpdated {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_SsngUpdated); ok {
			return x.SsngUpdated
		}
	}
	return nil
}

func (x *NicoliveMessage) GetOverflowedChat() *Chat {
	if x != nil {
		if x, ok := x.Data.(*NicoliveMessage_OverflowedChat); ok {
			return x.OverflowedChat
		}
	}
	return nil
}

type isNicoliveMessage_Data interface {
	isNicoliveMessage_Data()
}

type NicoliveMessage_Chat struct {
	Chat *Chat `protobuf:"bytes,1,opt,name=chat,proto3,oneof"`
}

type NicoliveMessage_SimpleNotification struct {
	SimpleNotification *SimpleNotification `protobuf:"bytes,7,opt,name=simple_notification,json=simpleNotification,proto3,oneof"`
}

type NicoliveMessage_Gift struct {
	Gift *Gift `protobuf:"bytes,8,opt,name=gift,proto3,oneof"`
}

type NicoliveMessage_Nicoad struct {
	Nicoad *Nicoad `protobuf:"bytes,9,opt,name=nicoad,proto3,oneof"`
}

type NicoliveMessage_GameUpdate struct {
	GameUpdate *GameUpdate `protobuf:"bytes,13,opt,name=game_update,json=gameUpdate,proto3,oneof"`
}

type NicoliveMessage_TagUpdated struct {
	TagUpdated *TagUpdated `protobuf:"bytes,17,opt,name=tag_updated,json=tagUpdated,proto3,oneof"`
}

type NicoliveMessage_ModeratorUpdated struct {
	ModeratorUpdated *atoms.ModeratorUpdated `protobuf:"bytes,18,opt,name=moderator_updated,json=moderatorUpdated,proto3,oneof"`
}

type NicoliveMessage_SsngUpdated struct {
	SsngUpdated *atoms.SSNGUpdated `protobuf:"bytes,19,opt,name=ssng_updated,json=ssngUpdated,proto3,oneof"`
}

type NicoliveMessage_OverflowedChat struct {
	OverflowedChat *Chat `protobuf:"bytes,20,opt,name=overflowed_chat,json=overflowedChat,proto3,oneof"`
}

func (*NicoliveMessage_Chat) isNicoliveMessage_Data() {}

func (*NicoliveMessage_SimpleNotification) isNicoliveMessage_Data() {}

func (*NicoliveMessage_Gift) isNicoliveMessage_Data() {}

func (*NicoliveMessage_Nicoad) isNicoliveMessage_Data() {}

func (*NicoliveMessage_GameUpdate) isNicoliveMessage_Data() {}

func (*NicoliveMessage_TagUpdated) isNicoliveMessage_Data() {}

func (*NicoliveMessage_ModeratorUpdated) isNicoliveMessage_Data() {}

func (*NicoliveMessage_SsngUpdated) isNicoliveMessage_Data() {}

func (*NicoliveMessage_OverflowedChat) isNicoliveMessage_Data() {}

var File_dwango_nicolive_chat_data_message_proto protoreflect.FileDescriptor

var file_dwango_nicolive_chat_data_message_proto_rawDesc = string([]byte{
	0x0a, 0x27, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2f, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64, 0x77, 0x61, 0x6e, 0x67,
	0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x25, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2f, 0x6e, 0x69, 0x63,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x61, 0x74, 0x6f, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x64, 0x77, 0x61,
	0x6e, 0x67, 0x6f, 0x2f, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x61, 0x74, 0x6f, 0x6d, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x05, 0x0a,
	0x0f, 0x4e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69,
	0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x67, 0x69, 0x66,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f,
	0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x69, 0x66, 0x74,
	0x12, 0x3b, 0x0a, 0x06, 0x6e, 0x69, 0x63, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x69, 0x63,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x69, 0x63, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x60, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64,
	0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x74, 0x6f, 0x6d, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x73, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x77, 0x61, 0x6e,
	0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x74, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x53, 0x4e, 0x47,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x73, 0x6e, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2e, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x07,
	0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x11, 0x42, 0x50, 0x5a, 0x4e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x69, 0x6e, 0x6f,
	0x73, 0x61, 0x6b, 0x69, 0x2f, 0x6e, 0x69, 0x63, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x77, 0x61, 0x6e, 0x67, 0x6f, 0x2f, 0x6e, 0x69, 0x63, 0x6f,
	0x6c, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_dwango_nicolive_chat_data_message_proto_rawDescOnce sync.Once
	file_dwango_nicolive_chat_data_message_proto_rawDescData []byte
)

func file_dwango_nicolive_chat_data_message_proto_rawDescGZIP() []byte {
	file_dwango_nicolive_chat_data_message_proto_rawDescOnce.Do(func() {
		file_dwango_nicolive_chat_data_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dwango_nicolive_chat_data_message_proto_rawDesc), len(file_dwango_nicolive_chat_data_message_proto_rawDesc)))
	})
	return file_dwango_nicolive_chat_data_message_proto_rawDescData
}

var file_dwango_nicolive_chat_data_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_dwango_nicolive_chat_data_message_proto_goTypes = []any{
	(*NicoliveMessage)(nil),        // 0: dwango.nicolive.chat.data.NicoliveMessage
	(*Chat)(nil),                   // 1: dwango.nicolive.chat.data.Chat
	(*SimpleNotification)(nil),     // 2: dwango.nicolive.chat.data.SimpleNotification
	(*Gift)(nil),                   // 3: dwango.nicolive.chat.data.Gift
	(*Nicoad)(nil),                 // 4: dwango.nicolive.chat.data.Nicoad
	(*GameUpdate)(nil),             // 5: dwango.nicolive.chat.data.GameUpdate
	(*TagUpdated)(nil),             // 6: dwango.nicolive.chat.data.TagUpdated
	(*atoms.ModeratorUpdated)(nil), // 7: dwango.nicolive.chat.data.atoms.ModeratorUpdated
	(*atoms.SSNGUpdated)(nil),      // 8: dwango.nicolive.chat.data.atoms.SSNGUpdated
}
var file_dwango_nicolive_chat_data_message_proto_depIdxs = []int32{
	1, // 0: dwango.nicolive.chat.data.NicoliveMessage.chat:type_name -> dwango.nicolive.chat.data.Chat
	2, // 1: dwango.nicolive.chat.data.NicoliveMessage.simple_notification:type_name -> dwango.nicolive.chat.data.SimpleNotification
	3, // 2: dwango.nicolive.chat.data.NicoliveMessage.gift:type_name -> dwango.nicolive.chat.data.Gift
	4, // 3: dwango.nicolive.chat.data.NicoliveMessage.nicoad:type_name -> dwango.nicolive.chat.data.Nicoad
	5, // 4: dwango.nicolive.chat.data.NicoliveMessage.game_update:type_name -> dwango.nicolive.chat.data.GameUpdate
	6, // 5: dwango.nicolive.chat.data.NicoliveMessage.tag_updated:type_name -> dwango.nicolive.chat.data.TagUpdated
	7, // 6: dwango.nicolive.chat.data.NicoliveMessage.moderator_updated:type_name -> dwango.nicolive.chat.data.atoms.ModeratorUpdated
	8, // 7: dwango.nicolive.chat.data.NicoliveMessage.ssng_updated:type_name -> dwango.nicolive.chat.data.atoms.SSNGUpdated
	1, // 8: dwango.nicolive.chat.data.NicoliveMessage.overflowed_chat:type_name -> dwango.nicolive.chat.data.Chat
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_dwango_nicolive_chat_data_message_proto_init() }
func file_dwango_nicolive_chat_data_message_proto_init() {
	if File_dwango_nicolive_chat_data_message_proto != nil {
		return
	}
	file_dwango_nicolive_chat_data_atoms_proto_init()
	file_dwango_nicolive_chat_data_message_proto_msgTypes[0].OneofWrappers = []any{
		(*NicoliveMessage_Chat)(nil),
		(*NicoliveMessage_SimpleNotification)(nil),
		(*NicoliveMessage_Gift)(nil),
		(*NicoliveMessage_Nicoad)(nil),
		(*NicoliveMessage_GameUpdate)(nil),
		(*NicoliveMessage_TagUpdated)(nil),
		(*NicoliveMessage_ModeratorUpdated)(nil),
		(*NicoliveMessage_SsngUpdated)(nil),
		(*NicoliveMessage_OverflowedChat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dwango_nicolive_chat_data_message_proto_rawDesc), len(file_dwango_nicolive_chat_data_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dwango_nicolive_chat_data_message_proto_goTypes,
		DependencyIndexes: file_dwango_nicolive_chat_data_message_proto_depIdxs,
		MessageInfos:      file_dwango_nicolive_chat_data_message_proto_msgTypes,
	}.Build()
	File_dwango_nicolive_chat_data_message_proto = out.File
	file_dwango_nicolive_chat_data_message_proto_goTypes = nil
	file_dwango_nicolive_chat_data_message_proto_depIdxs = nil
}
